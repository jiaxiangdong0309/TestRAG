
# TestRAG 项目开发 Prompt

## 项目概述
TestRAG 是一个基于 Vue 3 + TypeScript + Vite 的现代化前端项目，主要用于测试和开发 RAG（检索增强生成）相关功能。

## 技术架构

### 核心技术栈
- **前端框架**: Vue 3.5.18 (Composition API)
- **构建工具**: Vite 7.0.6
- **语言**: TypeScript 5.8.0
- **路由**: Vue Router 4.5.1
- **状态管理**: Pinia 3.0.3
- **样式框架**: Tailwind CSS 3.4.17
- **HTTP客户端**: Axios 1.11.0

### 开发工具链
- **代码检查**: ESLint 9.31.0 + Prettier 3.6.2
- **Vue开发工具**: Vue DevTools
- **CSS处理**: PostCSS + Autoprefixer
- **包管理**: npm

## 项目结构

```
TestRAG/
├── src/                          # 源代码目录
│   ├── api/                      # API 接口层
│   │   ├── config/              # API 配置
│   │   ├── modules/             # API 模块
│   │   ├── sse/                 # SSE 相关
│   │   └── types.ts             # API 类型定义
│   ├── assets/                   # 静态资源
│   │   ├── base.css             # 基础样式
│   │   ├── components.css       # 组件样式
│   │   ├── main.css             # 主样式
│   │   └── utilities.css        # 工具样式
│   ├── components/               # 公共组件
│   │   ├── ui/                  # UI 组件库
│   │   └── icons/               # 图标组件
│   ├── pages/                    # 页面组件
│   │   ├── search/              # 搜索页面
│   │   ├── knowledge/           # 知识库页面
│   │   ├── local/               # 本地页面
│   │   ├── about/               # 关于页面
│   │   ├── profile/             # 个人资料页面
│   │   ├── style-guide/         # 样式指南页面
│   │   ├── api-test/            # API 测试页面
│   │   └── dify-sse/            # Dify SSE 页面
│   ├── router/                   # 路由配置
│   ├── stores/                   # 状态管理
│   ├── views/                    # 视图组件
│   ├── App.vue                   # 根组件
│   └── main.ts                   # 应用入口
├── public/                        # 公共静态资源
├── docs/                          # 项目文档
├── env.d.ts                       # 环境类型声明
├── vite.config.ts                 # Vite 配置
├── tailwind.config.js             # Tailwind 配置
├── tsconfig.json                  # TypeScript 配置
└── package.json                   # 项目依赖
```

## 三方库使用说明

### 核心依赖
- **Vue 3**: 使用 Composition API 和 `<script setup>` 语法
- **Pinia**: 状态管理，支持 TypeScript
- **Vue Router**: 路由管理，支持懒加载
- **Axios**: HTTP 请求，已配置代理和拦截器

### 开发依赖
- **Tailwind CSS**: 原子化 CSS 框架
- **TypeScript**: 类型安全
- **ESLint + Prettier**: 代码质量和格式化
- **Vite**: 快速构建和热更新

## 新增页面开发规范

### 1. 创建页面文件夹结构
```bash
# 在 src/pages/ 下创建新页面
mkdir src/pages/your-page-name
cd src/pages/your-page-name

# 创建页面文件
touch index.vue
touch components/          # 页面专用组件
touch types.ts            # 页面类型定义（可选）
```

### 2. 页面文件模板
```vue
<template>
  <div class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-6">
        {{ pageTitle }}
      </h1>

      <!-- 页面内容 -->
      <div class="bg-white rounded-lg shadow p-6">
        <!-- 在这里添加页面内容 -->
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'

// 页面标题
const pageTitle = ref('页面标题')

// 页面逻辑
onMounted(() => {
  // 页面初始化逻辑
})
</script>

<style scoped>
/* 页面专用样式 */
</style>
```

### 3. 路由配置
在 `src/router/index.ts` 中添加新路由：
```typescript
{
  path: '/your-page-name',
  name: 'your-page-name',
  component: () => import('../pages/your-page-name/index.vue'),
}
```

### 4. 组件开发规范
- 使用 `<script setup>` 语法
- 组件名使用 PascalCase
- 文件名使用 kebab-case
- 使用 TypeScript 类型定义
- 遵循 Vue 3 最佳实践

### 5. 组件组织架构
#### 全局公共组件 (`src/components/`)
- 多个页面都会使用的通用组件
- 放在 `src/components/` 目录下
- 可以被整个项目复用
- 如：`Button.vue`、`IconCommunity.vue` 等

#### 页面专用组件 (`src/pages/页面名/components/`)
- 只在特定页面使用的组件
- 放在对应页面的 `components` 子目录中
- 不对外暴露，仅供当前页面使用
- 如：`src/pages/search/components/SearchInput.vue`

#### 组件分类原则
- **公共组件**：放在 `src/components/` 下，供多个页面复用
- **专用组件**：放在 `src/pages/页面名/components/` 下，仅供当前页面使用
- 避免页面专用组件污染全局命名空间
- 每个页面的组件都在自己的目录下，便于维护和管理

#### 目录结构示例
```
src/
├── components/                    # 全局公共组件
│   ├── ui/                       # UI 组件库
│   │   ├── Button.vue
│   │   ├── Input.vue
│   │   └── Modal.vue
│   └── icons/                    # 图标组件
│       ├── IconSearch.vue
│       └── IconUser.vue
└── pages/
    ├── search/
    │   ├── components/           # 搜索页面专用组件
    │   │   ├── SearchInput.vue
    │   │   └── SearchResults.vue
    │   └── index.vue
    └── knowledge/
        ├── components/           # 知识库页面专用组件
        │   ├── KnowledgeCard.vue
        │   └── KnowledgeList.vue
        └── index.vue
```

### 6. 状态管理
- 页面级状态使用 `ref` 或 `reactive`
- 全局状态使用 Pinia store
- 复杂逻辑直接在组件中实现或提取到 utils 工具函数

### 7. 样式规范
- 优先使用 Tailwind CSS 类
- 自定义样式使用 scoped 样式
- 响应式设计使用 Tailwind 断点

## API 开发规范

### 1. API 模块结构
```typescript
// src/api/modules/your-module.ts
import { request } from '../request'
import type { YourType } from '../types'

export const yourModuleApi = {
  // GET 请求
  getData: (params: YourParams) =>
    request.get<YourResponse>('/api/endpoint', { params }),

  // POST 请求
  createData: (data: YourData) =>
    request.post<YourResponse>('/api/endpoint', data),

  // PUT 请求
  updateData: (id: string, data: YourData) =>
    request.put<YourResponse>(`/api/endpoint/${id}`, data),

  // DELETE 请求
  deleteData: (id: string) =>
    request.delete(`/api/endpoint/${id}`)
}
```

### 2. 类型定义
```typescript
// src/api/types.ts
export interface YourData {
  id: string
  name: string
  // ... 其他字段
}

export interface YourParams {
  page?: number
  size?: number
  // ... 其他参数
}

export interface YourResponse {
  code: number
  data: YourData[]
  message: string
}
```

## 开发工作流

### 1. 启动开发环境
```bash
npm install          # 安装依赖
npm run dev          # 启动开发服务器
```

### 2. 代码质量检查
```bash
npm run lint         # ESLint 检查
npm run format       # Prettier 格式化
npm run type-check   # TypeScript 类型检查
```

### 3. 构建和部署
```bash
npm run build        # 构建生产版本
npm run preview      # 预览构建结果
```

## 最佳实践

### 1. 组件设计
- 单一职责原则
- 可复用性
- 类型安全
- 响应式设计

### 2. 状态管理
- 合理使用 Pinia store
- 避免过度全局化
- 使用 computed 优化性能

### 3. 性能优化
- 路由懒加载
- 组件懒加载
- 图片优化
- 代码分割

### 4. 错误处理
- 统一的错误处理机制
- 用户友好的错误提示
- 错误日志记录

## 常见问题解决

### 1. TypeScript 类型错误
- 检查类型定义文件
- 使用类型断言
- 更新类型声明

### 2. 样式问题
- 检查 Tailwind 配置
- 使用浏览器开发者工具
- 确保 CSS 优先级正确

### 3. 路由问题
- 检查路由配置
- 确认组件导入路径
- 验证路由参数

## 扩展功能

### 1. 新增功能模块
- 在 `src/` 下创建新目录
- 更新路由配置
- 添加相关类型定义
- 更新 API 接口

### 2. 集成第三方服务
- 在 `src/api/modules/` 下创建新模块
- 配置环境变量
- 添加错误处理
- 更新类型定义

### 3. 自定义组件库
- 在 `src/components/ui/` 下创建
- 使用 TypeScript 定义 props
- 添加单元测试
- 编写使用文档

---

这份 Prompt 文档将帮助你更好地理解项目结构，快速上手开发，并遵循项目的开发规范。如有疑问，请参考相关文档或咨询团队成员。


这份 Prompt 文档将帮助你更好地理解项目结构，快速上手开发，并遵循项目的开发规范。如有疑问，请参考相关文档或咨询团队成员。
